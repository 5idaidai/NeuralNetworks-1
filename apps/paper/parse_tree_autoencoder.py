#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Created on March 7, 2014

@author: Chunwei Yan @ PKU
@mail:  yanchunwei@outlook.com

train recursive autoencoder based on parse trees generated by Standford Parser
'''
from __future__ import division
import sys
import numpy as np
sys.path.append('..')
sys.path.append('../../')
from paper import config as cg
from models.recursive_autoencoder import BinaryAutoencoder
from _word2vec import Trainer as Word2Vec
from models.recursive_autoencoder.binary_tree_autoencoder import BinaryTree, BinaryTreeAutoencoder
from syntax_tree.parse_tree import SyntaxTreeParser
from exec_frame import BaseModel, ExecFrame

class ParseTreeAutoencoder(object):
    '''
    based on SyntaxTreeParser and BinaryTree
    '''
    def __init__(self, word2vec):
        '''
        :parameters:
            word2vec: pre-trained word2vec model
        '''
        self.word2vec = word2vec
        self.len_vector = cg.LEN_WORD_VECTOR
        self.bta = BinaryTreeAutoencoder(
            len_vector = self.len_vector,
            )
        # binary autoencoder
        self.bae = self.bta.bae

    def train_with_tree(self, parse_tree):
        '''
        :parameters:
            parse_tree: string
        '''
        tree = self.create_tree(parse_tree)
        bt = BinaryTree(tree.root, self.bae)
        if bt.n_children < 5:
            print '!! skip tree: two less children'
            print '>\t', parse_tree
            return
        return self.bta.train_with_tree(bt)

    def create_tree(self, stree):
        '''
        parse a line and return a tree

        :parameters:
            stree: string

        :returns:
            syntax_tree : object of SyntaxTreeParser
        '''
        syntax_tree = SyntaxTreeParser(stree)
        # init leaf node's vector
        syntax_tree.init_leaf_vec(self.word2vec)
        return syntax_tree



class  _ParseTreeAutoencoder(BaseModel):
    def __init__(self, word2vec, strees):
        self.model = ParseTreeAutoencoder(word2vec)
        self.strees = strees

    def get_model(self):
        return self.model.bae

    def train_iter(self):
        costs = []
        for i,tree in enumerate(self.strees):
            #print i, tree
            cost = self.model.train_with_tree(tree)
            if cost is not None:
                costs.append(cost)
                print '%d>c\t%f' % (i, cost)
        return np.mean(costs)





class Main(ExecFrame):

    def __init__(self, w2v_ph, model_root, 
            strees = [],
            n_iters=1000, n_step2save=250,
            window=5, tolerance=0.03):
        _word2vec = Word2Vec()
        _word2vec.model_fromfile(w2v_ph)

        model = _ParseTreeAutoencoder( word2vec = _word2vec,
                strees = strees,
            )
        ExecFrame.__init__(self,
            model = model,
            model_root = model_root,
            n_iters = n_iters,
            n_step2save = n_step2save,
            window = window,
            tolerance = tolerance
            )


def get_stree_from_paths(paths):
    strees = []
    for ph in paths:
        with open(ph) as f:
            while True:
                line = f.readline()
                if not line:break
                strees.append(line)
    return strees



if __name__ == "__main__":
    '''
    data_ph = "./data/syntax_trees.txt"
    trees = []
    with open(data_ph) as f:
        while True:
            line = f.readline()
            if not line:break
            trees.append(line)

    _word2vec = Word2Vec()
    _word2vec.model_fromfile('data/models/2.w2v')
    pa = ParseTreeAutoencoder(_word2vec)

    for tree in trees:
        #print 'train:', tree
        cost = pa.train_with_tree(tree)
        print 'cost', cost
    '''
    data_phs = sys.stdin.read().split()

    #data_ph = "./data/syntax_trees.txt"
    strees = get_stree_from_paths(data_phs)

    main = Main(
        w2v_ph = 'data/models/1.w2v',
        strees = strees,
        model_root = "data/models/pta_full/",
        n_step2save = 1,
        )
    main.run()
