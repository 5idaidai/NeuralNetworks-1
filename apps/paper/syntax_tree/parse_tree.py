#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Created on March 6, 2014

@author: Chunwei Yan @ PKU
@mail:  yanchunwei@outlook.com

parse the syntax tree
'''
from __future__ import division


class Node(object):
    def __init__(self, name, lchild=None, rchild=None):
        self.name = self._space_token(name)
        print 'self.name', self.name
        print 'self.name.list', self.name.split()
        self.lchild = lchild
        self.rchild = rchild
        # run
        self.expand_subtree()

    def is_leaf(self):
        return self.lchild == None and self.rchild  == None

    def __repr__(self):
        return "<Node: %s>" % self.name

    def expand_subtree(self):
        child_names = self.get_subtree_children_names()
        self.create_child_nodes(child_names)
    
    def get_subtree_children_names(self):
        '''
        get children's names of the next level
        '''
        stack = []
        is_token = lambda x:x.startswith('(')
        is_content = lambda x:x.endswith(')')
        # save current child node's name parts
        content = []
        child_names = []
        n_tokens = 0
        n_content = 0
        for i,part in enumerate(self.name.split()):
            if is_token(part):
                #print 'token:', part
                stack.append(part)
                n_tokens += 1

            elif is_content(part):
                #print 'content:', part
                stack.append(part)
                n_content += 1
                #content.insert(0, stack.pop())
                #content.insert(0, stack.pop())
                if n_content + 1 == n_tokens:
                    content = ' '.join(stack[1:])
                    child_names.append(content)
                    stack = [ stack[0] ]
        #print 'child_names', child_names
        return child_names

    def create_child_nodes(self, names):
        if len(names) == 2:
            self.lchild = Node(names[0])
            self.rchild = Node(names[1])

        elif len(names) > 2:
            self.lchild = Node(names[0])
            new_rchild_name = "(NEW %s )" % ' '.join(names[1:])
            self.rchild = Node(new_rchild_name)
        else:
            print "children's name < 2"


    def _space_token(self, line):
        '''
        add a space between ))
        '''
        while line.find('))') != -1:
            line = line.replace('))', ') )')
        return line





class SyntaxTreeParser(object):

    Node = Node
    
    def __init__(self, line):
        self.line = line
        self.build_tree()

    def build_tree(self):
        '''
        (S (NP (PRP I)) (VP (VBD saw) (NP (DT a) (NN man)) (PP (IN with) (NP (DT a) (NN telescope)))))

        :parameters:
            line: string
                a line of syntax tree generated by 
                    Standford Parser
        '''
        self.root = self.Node(self.line)

    def draw_graph(self, fname="tmp.dot"):
        '''
        draw the graph using graphviz
        '''
        node_idx = [0]
        dot = ["digraph G {"]

        def scan_tree(fname, node, node_idx, dot):
            if node != None:
                node_idx[0] += 1
                name = "node_%d" % node_idx[0]
                dot += [
                    '%s [label="%s"];' % (name, str(node)),
                    '%s -> %s;' % (fname, name), ]
                scan_tree(name, node.lchild, node_idx, dot)
                scan_tree(name, node.rchild, node_idx, dot)

        scan_tree('node_0', self.root, node_idx, dot)
        dot.append("}")
        dot_file = '\n'.join(dot)
        #print 'dot', dot_file
        print 'write dot file to ', fname
        with open(fname, 'w') as f:
            f.write(dot_file)




if __name__ == "__main__":

    node = Node("(S (NP (PRP I)) (VP (VBD saw) (NP (DT a) (NN man)) (PP (IN with) (NP (DT a) (NN telescope)))))")
    print node
    #node = Node("(NP a)")

    #print 'child names:', node.get_subtree_children_names()
    line = "(S (NP (PRP I)) (VP (VBD saw) (NP (DT a) (NN man)) (PP (IN with) (NP (DT a) (NN telescope)))))"

    tree = SyntaxTreeParser(line)
    tree.draw_graph()

